#!/usr/bin/env python3
"""
Script de test pour valider le comportement de validation de la classe Siril.
"""

import sys
import os
import logging

# Add the parent directory to the path to import the lib module
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from lib.siril_utils import Siril

def test_configure_defaults_validation():
    """Test de la validation lors de configure_defaults."""
    print("=== Test configure_defaults avec validation ===")
    
    # Test avec une configuration valide (flatpak)
    print("\n1. Test configuration valide (flatpak):")
    try:
        Siril.configure_defaults(siril_mode="flatpak")
        print("   ‚úì Configuration flatpak accept√©e")
    except ValueError as e:
        print(f"   ‚ùå Configuration flatpak rejet√©e: {e}")
    
    # Test avec un mode invalide
    print("\n2. Test configuration invalide (mode):")
    try:
        Siril.configure_defaults(siril_mode="invalid_mode")
        print("   ‚ùå Configuration invalide accept√©e (ne devrait pas arriver)")
    except ValueError as e:
        print(f"   ‚úì Configuration invalide rejet√©e: {e}")
    
    # Test avec un chemin invalide
    print("\n3. Test configuration invalide (chemin):")
    try:
        Siril.configure_defaults(siril_path="/chemin/inexistant/siril", siril_mode="native")
        print("   ‚ùå Chemin invalide accept√© (ne devrait pas arriver)")
    except ValueError as e:
        print(f"   ‚úì Chemin invalide rejet√©: {e}")

def test_instance_creation_validation():
    """Test de la validation lors de la cr√©ation d'instances."""
    print("\n=== Test cr√©ation d'instances avec validation ===")
    
    # Remettre une configuration valide
    try:
        Siril.configure_defaults(siril_mode="flatpak")
    except ValueError:
        pass  # Peut √©chouer si flatpak n'est pas disponible
    
    # Test cr√©ation instance avec configuration par d√©faut
    print("\n1. Test cr√©ation avec configuration par d√©faut:")
    try:
        siril = Siril.create_with_defaults()
        print(f"   ‚úì Instance cr√©√©e: valid√©e={siril.is_validated}")
    except ValueError as e:
        print(f"   ‚ùå Cr√©ation √©chou√©e: {e}")
    
    # Test cr√©ation instance avec override invalide
    print("\n2. Test cr√©ation avec override invalide:")
    try:
        siril = Siril(siril_mode="mode_inexistant")
        print("   ‚ùå Instance avec mode invalide cr√©√©e (ne devrait pas arriver)")
    except ValueError as e:
        print(f"   ‚úì Instance avec mode invalide rejet√©e: {e}")
    
    # Test modification propri√©t√© invalide
    print("\n3. Test modification propri√©t√© avec valeur invalide:")
    try:
        siril = Siril.create_with_defaults()
        siril.siril_mode = "mode_invalide"
        print("   ‚ùå Modification invalide accept√©e (ne devrait pas arriver)")
    except ValueError as e:
        print(f"   ‚úì Modification invalide rejet√©e: {e}")
        print(f"   Mode restaur√©: {siril.siril_mode}")

def test_validation_details():
    """Test des d√©tails de validation pour diff√©rents modes."""
    print("\n=== Test d√©tails de validation ===")
    
    # Supprimer les logs pour ce test
    logging.disable(logging.CRITICAL)
    
    modes_to_test = ["flatpak", "native", "appimage"]
    
    for mode in modes_to_test:
        print(f"\n{mode.capitalize()}:")
        try:
            Siril.configure_defaults(siril_mode=mode)
            print(f"   ‚úì Mode {mode} valid√©")
            
            # Test cr√©ation instance
            siril = Siril.create_with_defaults()
            print(f"   ‚úì Instance {mode} cr√©√©e et valid√©e")
            
        except ValueError as e:
            print(f"   ‚ùå Mode {mode} invalide: {e}")
    
    # R√©activer les logs
    logging.disable(logging.NOTSET)

def main():
    print("üß™ Tests de validation de la classe Siril")
    print("=" * 50)
    
    # Configuration du logging pour r√©duire le bruit
    logging.basicConfig(level=logging.WARNING)
    
    try:
        test_configure_defaults_validation()
        test_instance_creation_validation()
        test_validation_details()
        
        print("\n" + "=" * 50)
        print("‚úÖ Tests de validation termin√©s")
        print("\nNote: Certains tests peuvent √©chouer selon l'environnement:")
        print("- Flatpak doit √™tre install√© pour valider le mode 'flatpak'")
        print("- Siril doit √™tre dans le PATH pour valider le mode 'native'")
        print("- Les chemins d'AppImage doivent exister pour le mode 'appimage'")
        
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue lors des tests: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()